x-db:
  hostname: &db_hostname "127.0.0.1"
  port: &db_port 5432
  database: &db_name "monitoring_system"
  username: &db_username "postgres"
  password: &db_password "1234"

x-app-settings:
  app-settings: &app_settings
    API_TOKEN: "Basic YWRtaW5pc3RyYXRvcjpBZGxpbms2MTY2"
    TCP_PORT: 7070
    TCP_HOST: "0.0.0.0"
    HTTPS_PORT: 3000
    CONTROLLER_URI: "http://192.168.1.172:6166"
    PG_USER: "postgres"
    PG_HOST: "127.0.0.1"
    PG_DBNAME: "monitoring_system"
    PG_PASSWORD: "1234"
    PG_PORT: 5432
    NUM_CHANNELS: 4
    TEST_COUNT: 10

services:
  db:
    image: postgres:14.2-alpine
    environment:
      POSTGRES_DB: *db_name
      POSTGRES_USER: *db_username
      POSTGRES_PASSWORD: *db_password
    command: postgres -c 'max_connections=2000' -c 'log_statement=all'
    ports:
      - "5433:5432"
    networks:
      - backend

  server:
    build:
      context: .
      dockerfile: server/Dockerfile
    ports:
      - "7070:7070"
      - "3000:3000"

    networks:
      - backend
      - frontend
    environment: *app_settings

  pgweb:
    image: sosedoff/pgweb
    restart: unless-stopped
    ports:
      - "8081:8081"
    links:
      - db:postgres
    environment:
      - DATABASE_URL=postgres://postgres:1234@postgres:5432/monitoring_system?sslmode=disable
    networks:
      - backend
    depends_on:
      db:
        condition: service_started

  webapp:
    build:
      context: .
      dockerfile: webapp/Dockerfile
    restart: unless-stopped
    ports:
      - "5000:8080"
    networks:
      - frontend
    entrypoint: ["http-server", "--proxy", "http://localhost:8080?"]

networks:
  backend: {}
  frontend: {}
